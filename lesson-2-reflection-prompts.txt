What happens when you initialize a repository? Why do you need to do it?
It creates empty repository in the working directory (file that we want to make the repository in). 
It is neccesary because when there is no repository, there is no version control.
Thus, you cannot commit whenever there are changes throughout the project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
It is the bridge between working directory and the repository that represent the change
that we want to commit.
In terms of the value, it allows multiple files to be able to commit in a single repository.

How can you use the staging area to make sure you have one commit per logical
change?
Staging area is used for filtering the files in working directory that we want to change.
When we decided to change all of the files in the working directory,
staging area is useful for knowing which files to commit before another commit comes in 
so that the commit process will be efficient.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
It is when we want to change the contents of the file without having to change them in master branch.
It is helpful because branches allows us to determine if changes in master branch is important.
Alternatively, branches is useful for whether we want to create alternative version of the 
repository or to do bug testing.

How do the diagrams help you visualize the branch structure?
It is to know where the branch exists and which commits do the branch/branches connect.
Besides, it is to determine whether the commits are reachable and to keep track of commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result of merging two branches together is to become one branch that consist of
two branches that we merged.
Because we want to know which branches are being merged and know whether the commits
are reachable to the merged branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
The good thing about Git's automatic merging is to be able to execute merging faster.
However, it brings merge conflicts that needs to be change manually.

On the other side, the good thing about doing merges manually avoids merge conflicts.
However, the merge takes a lot of time, which reduces efficiency.